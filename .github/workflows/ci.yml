name: CI
on:
  push:
    branches:
    - master
  schedule:
  - cron: '12 12 * * *'
  workflow_dispatch:
    logLevel:
      description: 'Log level'
      required: true
      default: 'info'
      type: choice
      options:
      - info
      - debug
env:
  APT_REPO_URL_UBUNTU: http://azure.archive.ubuntu.com/ubuntu
  APT_REPO_URL_UBUNTU_PORTS: http://azure.ports.ubuntu.com/ubuntu-ports
jobs:
  build-and-publish:
    name: ${{ matrix.distro }} ${{ matrix.release }} ${{ matrix.kernel }} ${{ matrix.profile }} (${{ matrix.arch }})
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        distro:  [ubuntu]
        arch:    [amd64, arm64]
        release: [bionic, focal]
        kernel:  [generic, generic-hwe]
        profile: [server, server-nvidia, desktop, desktop-nvidia]
        exclude:
        - arch: arm64
          profile: server-nvidia
        - arch: arm64
          profile: desktop-nvidia
        - arch: arm64
          release: bionic
    env:
      PROFILE_YAML: profiles/${{ matrix.distro }}/${{ matrix.release }}/${{ matrix.kernel }}/${{ matrix.arch }}/${{ matrix.profile }}.yml
      TARGET_NAME: ${{ matrix.distro }}_${{ matrix.release }}_${{ matrix.kernel }}_${{ matrix.arch }}_${{ matrix.profile }}
      RELEASE_DIR: ${{ matrix.distro }}/${{ matrix.release }}/${{ matrix.kernel }}/${{ matrix.arch }}/${{ matrix.profile }}
    steps:
    #
    # Build Image
    #
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: true
        fetch-depth: 1
    - name: Update
      run: sudo apt-get -y update
    - name: Initialize
      id: initialize
      run: rake ${TARGET_NAME}:initialize
    - name: Provision
      id: provision
      run: rake ${TARGET_NAME}:provision
    - name: Finalize
      id: finalize
      run: rake ${TARGET_NAME}:finalize

    #
    # Build Artifacts
    #
    - name: Sizes
      if: success()
      run: ls -lah releases/${RELEASE_DIR}/
    - name: Packages
      if: success()
      run: cat releases/${RELEASE_DIR}/packages.manifest
    - name: Checksums
      if: success()
      run: cat releases/${RELEASE_DIR}/SHA256SUMS

    #
    # Check Mount Point
    #
    - name: Check Mount Point
      if: failure()
      run: findmnt -aR /
    - name: Check Open Process
      if: failure()
      run: lsof /

    #
    # Check Difference
    #
    # - name: Download Packages Manifest
    #   run: wget -qO /tmp/packages.manifest https://mitamae-cloud-image.s3.${AWS_DEFAULT_REGION}.wasabisys.com/${RELEASE_DIR}/packages.manifest
    #   env:
    #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    # - name: Check Difference
    #   run: diff -u /tmp/packages.manifest releases/${RELEASE_DIR}/packages.manifest || echo 'PUBLISH=true' >> $GITHUB_ENV

    #
    # Publish Wasabi
    #
    # - name: AssumeRole
    #   if: env.PUBLISH == 'true'
    #   run: |
    #     RESULT="$(
    #       aws sts assume-role --role-arn "${AWS_ROLE_ARN}" \
    #                           --role-session-name "${GITHUB_RUN_ID}" \
    #                           --endpoint-url "https://sts.${AWS_DEFAULT_REGION}.wasabisys.com"
    #     )"
    #     AWS_ACCESS_KEY_ID="$(echo "${RESULT}" | jq -r '.Credentials.AccessKeyId')"
    #     AWS_SECRET_ACCESS_KEY="$(echo "${RESULT}" | jq -r '.Credentials.SecretAccessKey')"
    #     AWS_SESSION_TOKEN="$(echo "${RESULT}" | jq -r '.Credentials.SessionToken')"
    #     echo "::add-mask::$AWS_DEFAULT_REGION"
    #     echo "::add-mask::$AWS_ACCESS_KEY_ID"
    #     echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
    #     echo "::add-mask::$AWS_SESSION_TOKEN"
    #     echo "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}" >> $GITHUB_ENV
    #     echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
    #     echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
    #     echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $GITHUB_ENV
    #   env:
    #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
    # - name: Publish
    #   if: env.PUBLISH == 'true'
    #   uses: nick-invision/retry@v2
    #   with:
    #     timeout_minutes: 3
    #     max_attempts: 3
    #     command: >-
    #       aws s3 sync
    #       --no-progress
    #       --exact-timestamps
    #       --delete
    #       --endpoint-url=https://s3.${AWS_DEFAULT_REGION}.wasabisys.com
    #       releases/${RELEASE_DIR}
    #       s3://mitamae-cloud-image/${RELEASE_DIR}
